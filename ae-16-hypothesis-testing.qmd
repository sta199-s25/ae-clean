---
title: "AE 16: loans again"
---

In this application exercise, we will do hypothesis testing for the slope in the linear model

## Packages

We will use **tidyverse** and **tidymodels** for data exploration and modeling, respectively, and the **openintro** package for the data, and the **knitr** package for formatting tables.

```{r}
#| label: load-packages
#| message: false
library(tidyverse)
library(tidymodels)
library(openintro)
library(knitr)
```

## Data

Here are the loans again:

```{r}
#| label: glimpse-data
glimpse(loans_full_schema)
```

Let's clean a wee bit:

```{r}
full_loans <- loans_full_schema |>
  drop_na(annual_income, total_credit_utilized) |>
  filter(log(annual_income) > 0) |>
  filter(log(total_credit_utilized) > 0) |>
  mutate(
    log_cred = log(total_credit_utilized),
    log_inc = log(annual_income)
  )
```

Let's create a baby version of these data to make a point:

```{r}
set.seed(8675309)
baby_loans <- full_loans |>
  slice(sample(1:nrow(full_loans), 25))
```

## Plot

Plot the full thing

```{r}
full_loans |>
  ggplot(aes(x = log_inc, y = log_cred)) + 
  geom_point() + 
  geom_smooth(method = "lm") + 
  xlim(7, 15) + 
  ylim(0, 15) + 
  labs(
    x = "Annual income (log $)",
    y = "Credit utilization (log $)",
    title = paste("Model fit with sample size of ", nrow(full_loans), " people", sep = "")
  ) + 
  theme(title = element_text(size = 12, face = "bold"))
```
Plot the baby thing:

```{r}
baby_loans |>
  ggplot(aes(x = log_inc, y = log_cred)) + 
  geom_point() + 
  geom_smooth(method = "lm") + 
  xlim(7, 15) + 
  ylim(0, 15) + 
  labs(
    x = "Annual income (log $)",
    y = "Credit utilization (log $)",
    title = paste("Model fit with sample size of ", nrow(baby_loans), " people", sep = "")
  ) + 
  theme(title = element_text(size = 12, face = "bold"))
```

## Inference with the small dataset

```{r}
#| label: observed-baby-fit
#| eval: FALSE

observed_fit <- ??? |>
  specify(???) |>
  fit()

observed_fit
```

```{r}
#| label: simulate-null-dist
#| eval: false
set.seed(20241118)
null_dist <- ??? |>
  specify(???) |>
  hypothesize(null = ???) |>
  generate(reps = ???, type = ???) |>
  fit()
```


```{r}
#| label: plot-null-dist
# add code
```

```{r}
#| label: shade-p-value
#| eval: false
visualize(null_dist) +
  shade_p_value(obs_stat = observed_fit, direction = "two-sided")
```

```{r}
#| label: compute-p-value
#| eval: false
null_dist |>
  get_p_value(obs_stat = observed_fit, direction = "two-sided")
```

## Inference with the full dataset


```{r}
#| label: observed-full-fit


```

```{r}
#| label: simulate-full-null-dist

```


```{r}
#| label: plot-full-null-dist

```

```{r}
#| label: shade-full-p-value


```

```{r}
#| label: compute-full-p-value

```


