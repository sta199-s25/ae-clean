---
title: "AE 17: stonks"
---

Today we’ll explore the question “How do stock prices of Apple and Microsoft relate to each other?”

# Packages

```{r}
#| label: load-packages
#| message: false

library(tidyverse)
library(tidymodels)
```

# Data

The data for this application exercise was originally gathered using the [**tidyquant**](https://business-science.github.io/tidyquant/) R package. It features Apple and Microsoft stock prices from January 1st 2020 to December 31st 2021.

First, let's load the data:

```{r}
#| label: load-data
#| message: false

stocks <- read_csv("data/stocks.csv")
```

To keep things simple, we'll work with a subset of the data, stock prices in January 2020.

```{r}
stocks_jan2020 <- stocks |>
  filter(month(date) == 1 & year(date) == 2020)

glimpse(stocks_jan2020)
```
These are daily data. For each stock, we have several variables, including:

- `Open`: price at the start of the trading day;
- `High`: highest price during the trading day;
- `Low`: lowest price during the trading day;
- `Close`: price at the end of the trading day;

We will focus on using the Microsoft **open** to predict the Apple **open**.

# Visualize

**Your turn**: Plot the data and the line of best fit.

```{r}
#| message: false
# add code here
```


# Point Estimation

a. **Your turn**: Fit the linear model to these data:

```{r}
# add code here
```

b. **Your turn**: Typeset the equation for the model fit: 

$$
LALALA
$$

c. **Your turn**: Interpret the slope and the intercept estimates:

    - 
    - 

# Interval Estimation

a. **Demo**: Using seed `8675309`, generate `500` bootstrap samples, and store them in a new data frame called `bstrap_samples`.

```{r}
set.seed(8675309)
# add code here
```

b. **Demo**: Fit a linear model to each of these bootstrap samples and store the estimates in a new data framed called `bstrap_fits`.

```{r}
# add code here
```

c. **Your turn**: Use `linear_reg() |> fit(...)` to fit a linear model to bootstrap sample number *347*, and verify that you get the same estimates as the ones contained in `bstrap_fits`.

```{r}
# add code here
```

d. **Demo**: Compute 90% confidence intervals for the slope and the intercept using the `get_confidence_interval` command.

```{r}
# add code here
```


e. **Your turn**: Verify that you get the same numbers when you manually calculate the quantiles of the slope estimates using `summarize` and `quantile`. *Pay attention to the grouping*.

```{r}
# add code here
```

# Hypothesis Testing

Let's consider the hypotheses: 

$$
H_0:\beta_1=0\quad vs\quad H_A: \beta_1\neq 0.
$$
The null hypothesis corresponds to the claim that Microsoft and Apple stock prices are uncorrelated. Probably bogus, but let's see what the data say.

a. Simulate and plot the null distribution for the slope:

```{r}
#| message: false
set.seed(20241118)
# add code here
```

b. Add a vertical line to your plot indicating the point estimate of the slope from your original data analysis:

```{r}
# add code here
```

c. Compute the $p$-value for this test and interpret it:

```{r}
#| warning: false
# add code here
```


